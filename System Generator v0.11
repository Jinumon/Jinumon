import random

stars_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + 3    ##Simulates roll of 3d+3 for open cluster star system
stars = "Invalid", "Invalid", "Invalid", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Binary", "Binary", "Binary", "Binary", "Binary", "Binary", "Trinary", "Trinary", "Trinary", "Trinary", "Trinary"
stars_final = stars[stars_roll]

population_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)   ##Simulates roll of 3d for stellar age population
population_roll_2 = random.randint(1, 6) - 1
population_roll_3 = random.randint(1, 6) - 1
population_type = "Invalid", "Invalid", "Invalid", "Extreme Population I", "Young Population I", "Young Population I", "Young Population I", "Intermediate Population I", "Intermediate Population I", "Intermediate Population I", "Intermediate Population I", "Old Population I", "Old Population I", "Old Population I", "Old Population I", "Intermediate Population II", "Intermediate Population II", "Intermediate Population II", "Extreme Population"
population_number = -1, -1, -1, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5
base_age = 0, 0.1, 2, 5.6, 8, 10
step_a = 0, 0.3, 0.6, 0.6, 0.6, 0.6
step_b = 0, 0.05, 0.1, 0.1, 0.1, 0.1

population_type_final = population_type[population_roll_1]
population_number_final = population_number[population_roll_1]
population_age_final = base_age[population_number_final] + (step_a[population_number_final] * population_roll_2) + (step_b[population_number_final] * population_roll_3)

primary_star_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

primary_star_roll_2 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

star_mass = 2.00, 1.90, 1.80, 1.70, 1.60, 1.50, 1.45, 1.40, 1.35, 1.30, 1.25, 1.20, 1.15, 1.10, 1.05, 1.00, 0.95, 0.90, 0.85, 0.80, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15, 0.10
star_type = "A5", "A6", "A7", "A9", "F0", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "G0", "G1", "G2", "G4", "G6", "G8", "K0", "K2", "K4", "K5", "K6", "K8", "M0", "M1", "M2", "M3", "M4", "M4", "M5", "M6", "M7"
star_temp = 8200, 8000, 7800, 7500, 7300, 7000, 6900, 6700, 6600, 6500, 6400, 6300, 6100, 6000, 5900, 5800, 5700, 5500, 5400, 5200, 4900, 4600, 4400, 4200, 4000, 3800, 3600, 3500, 3400, 3300, 3300, 3200, 3200, 3100
star_lmin = 16, 13, 11, 8.6, 6.7, 5.1, 4.3, 3.7, 3.1, 2.5, 2.1, 1.7, 1.4, 1.1, 0.87, 0.68, 0.56, 0.45, 0.36, 0.28, 0.23, 0.19, 0.15, 0.13, 0.11, 0.09, 0.07, 0.054, 0.037, 0.024, 0.015, 0.0079, 0.0036, 0.0012
star_lmax = 20, 16, 13, 10, 8.2, 6.5, 5.7, 5.1, 4.5, 3.9, 3.5, 3.0, 2.6, 2.2, 1.9, 1.6, 1.3, 1.0, 0.84, 0.65, 0.48, 0.35, 0.25, 0.20, 0.15, 0.11, 0.08, 0, 0, 0, 0, 0, 0, 0
star_mspan = 1.3, 1.5, 1.8, 2.1, 2.5, 3.0, 3.3, 3.7, 4.1, 4.6, 5.2, 5.9, 6.7, 7.7, 8.8, 10, 12, 14, 17, 20, 24, 30, 37, 42, 50, 59, 70, 0, 0, 0, 0, 0, 0, 0
star_sspan = 0.2, 0.2, 0.3, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.4, 1.6, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
star_gspan = 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.4, 0.5, 0.6, 0.6, 0.7, 0.8, 1.0, 1.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

if primary_star_roll_1 == 3 and primary_star_roll_2 <= 10 :
	primary_number = 0
elif primary_star_roll_1 == 3 and primary_star_roll_2 > 10 :
	primary_number = 1
elif primary_star_roll_1 == 4 and primary_star_roll_2 <= 8 :
	primary_number = 2
elif primary_star_roll_1 == 4 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 3
elif primary_star_roll_1 == 4 and primary_star_roll_2 > 11 :
	primary_number = 4
elif primary_star_roll_1 == 5 and primary_star_roll_2 <= 7 :
	primary_number = 5
elif primary_star_roll_1 == 5 and 7 < primary_star_roll_2 <= 10 :
	primary_number = 6
elif primary_star_roll_1 == 5 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 7
elif primary_star_roll_1 == 5 and primary_star_roll_2 > 12 :
	primary_number = 8
elif primary_star_roll_1 == 6 and primary_star_roll_2 <= 7 :
	primary_number = 9
elif primary_star_roll_1 == 6 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 10
elif primary_star_roll_1 == 6 and primary_star_roll_2 == 10 :
	primary_number = 11
elif primary_star_roll_1 == 6 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 12
elif primary_star_roll_1 == 6 and primary_star_roll_2 > 12 :
	primary_number = 13
elif primary_star_roll_1 == 7 and primary_star_roll_2 <= 7 :
	primary_number = 14
elif primary_star_roll_1 == 7 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 15
elif primary_star_roll_1 == 7 and primary_star_roll_2 == 10 :
	primary_number = 16
elif primary_star_roll_1 == 7 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 17
elif primary_star_roll_1 == 7 and primary_star_roll_2 > 12 :
	primary_number = 18
elif primary_star_roll_1 == 8 and primary_star_roll_2 <= 7 :
	primary_number = 19
elif primary_star_roll_1 == 8 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 20
elif primary_star_roll_1 == 8 and primary_star_roll_2 == 10 :
	primary_number = 21
elif primary_star_roll_1 == 8 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 22
elif primary_star_roll_1 == 8 and primary_star_roll_2 > 12 :
	primary_number = 23
elif primary_star_roll_1 == 9 and primary_star_roll_2 <= 8 :
	primary_number = 24
elif primary_star_roll_1 == 9 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 25
elif primary_star_roll_1 == 9 and primary_star_roll_2 > 11 :
	primary_number = 26
elif primary_star_roll_1 == 10 and primary_star_roll_2 <= 8 :
	primary_number = 27
elif primary_star_roll_1 == 10 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 28
elif primary_star_roll_1 == 10 and primary_star_roll_2 > 11 :
	primary_number = 29
elif primary_star_roll_1 == 11 :
	primary_number = 30
elif primary_star_roll_1 == 12 :
	primary_number = 31
elif primary_star_roll_1 == 13 :
	primary_number = 32
else :
	primary_number = 33

primary_mass = star_mass[primary_number]
primary_type = star_type[primary_number]
primary_temp = star_temp[primary_number]
primary_lmin = star_lmin[primary_number]
primary_lmax = star_lmax[primary_number]
primary_mspan = star_mspan[primary_number]
primary_sspan = star_sspan[primary_number]
primary_gspan = star_gspan[primary_number]

if primary_number <= 4 :
	primary_mass_variance = random.randint(-5, 4) * 0.01
elif primary_number == 5 :
	primary_mass_variance = random.randint(-2, 4) * 0.01
else :
	primary_mass_variance = random.randint(-2, 2) * 0.01

primary_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if primary_mspan + primary_sspan + primary_gspan < population_age_final and 0.40 < primary_mass :
	primary_mass_final = 0.9 + (primary_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
else :
	primary_mass_final = primary_mass + primary_mass_variance

if population_age_final <= primary_mspan :
	primary_lum = (primary_lmin + ((population_age_final / primary_mspan) * (primary_lmax - primary_lmin)))
elif (primary_mspan) < population_age_final <= (primary_mspan + primary_sspan) :
	primary_lum = primary_lmax
elif (primary_mspan + primary_sspan) < population_age_final <= (primary_mspan + primary_sspan + primary_gspan) :
	primary_lum = primary_lmax * 25
elif primary_mspan + primary_sspan + primary_gspan < population_age_final and primary_mass <= 0.40 :
	primary_lum = primary_lmin
else :
	primary_lum = 0.001

primary_lum_variance = random.randint(90, 110) * 0.01

primary_lum_final = primary_lum * primary_lum_variance

primary_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if population_age_final <= primary_mspan :
	primary_temp_base = primary_temp
elif primary_mspan < population_age_final <= primary_mspan + primary_sspan :
	primary_temp_base = primary_temp - (((population_age_final - primary_mspan) / primary_sspan) * (primary_temp - 4800))
elif primary_mspan + primary_sspan < population_age_final <= primary_mspan + primary_sspan + primary_sspan :
	primary_temp_base = 3000 + (200 * primary_giant_temp_roll)
else :
	primary_temp_base = primary_temp

primary_temp_variance = random.randint(-100, 100)

if (primary_mspan + primary_sspan + primary_gspan) < population_age_final and 0.40 < primary_mass :
	primary_temp_final = "N/A"
else :
	primary_temp_final = primary_temp_base + primary_temp_variance

if primary_temp_final == "N/A" :
	primary_radius = "N/A"
else :
	primary_radius = (155000 * primary_lum_final**0.5) / primary_temp_final**2

print "System Type: " + str(stars_final) + " (3d+3: " + str(stars_roll) + ")"
print "System Age: " + str(population_age_final) + " Billion Years"
if primary_temp_final == "N/A" :
	print "Primary Star: " + str(primary_mass_final) + " solar masses (White Dwarf)"
else :
	print "Primary Star: " + str(primary_mass_final) + " (" + str(primary_mass) + ") solar masses (3d: " + str(primary_star_roll_1) + ", 3d: " + str(primary_star_roll_2) + ")"
if primary_temp_final == "N/A" :
	print "	Type: " + str(primary_type) + "; Temp: " + str(primary_temp_final) + "; Luminosity: " + str(primary_lum_final) + "L; Radius: " + str(primary_radius)
else :
	print "	Type: " + str(primary_type) + "; Temp: " + str(primary_temp_final) + "K; Luminosity: " + str(primary_lum_final) + "L; Radius: " + str(primary_radius) + " AU"
