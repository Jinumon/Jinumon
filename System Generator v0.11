import random

stars_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + 3    ##Simulates roll of 3d+3 for open cluster star system
stars = "Invalid", "Invalid", "Invalid", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Singular", "Binary", "Binary", "Binary", "Binary", "Binary", "Binary", "Trinary", "Trinary", "Trinary", "Trinary", "Trinary"
stars_final = stars[stars_roll]

population_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)   ##Simulates roll of 3d for stellar age population
population_roll_2 = random.randint(1, 6) - 1
population_roll_3 = random.randint(1, 6) - 1
population_type = "Invalid", "Invalid", "Invalid", "Extreme Population I", "Young Population I", "Young Population I", "Young Population I", "Intermediate Population I", "Intermediate Population I", "Intermediate Population I", "Intermediate Population I", "Old Population I", "Old Population I", "Old Population I", "Old Population I", "Intermediate Population II", "Intermediate Population II", "Intermediate Population II", "Extreme Population"
population_number = -1, -1, -1, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5
base_age = 0, 0.1, 2, 5.6, 8, 10
step_a = 0, 0.3, 0.6, 0.6, 0.6, 0.6
step_b = 0, 0.05, 0.1, 0.1, 0.1, 0.1

population_type_final = population_type[population_roll_1]
population_number_final = population_number[population_roll_1]
population_age_final = base_age[population_number_final] + (step_a[population_number_final] * population_roll_2) + (step_b[population_number_final] * population_roll_3)

primary_star_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

primary_star_roll_2 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

star_mass = 2.00, 1.90, 1.80, 1.70, 1.60, 1.50, 1.45, 1.40, 1.35, 1.30, 1.25, 1.20, 1.15, 1.10, 1.05, 1.00, 0.95, 0.90, 0.85, 0.80, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15, 0.10
star_type = "A5", "A6", "A7", "A9", "F0", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "G0", "G1", "G2", "G4", "G6", "G8", "K0", "K2", "K4", "K5", "K6", "K8", "M0", "M1", "M2", "M3", "M4", "M4", "M5", "M6", "M7"
star_temp = 8200, 8000, 7800, 7500, 7300, 7000, 6900, 6700, 6600, 6500, 6400, 6300, 6100, 6000, 5900, 5800, 5700, 5500, 5400, 5200, 4900, 4600, 4400, 4200, 4000, 3800, 3600, 3500, 3400, 3300, 3300, 3200, 3200, 3100
star_lmin = 16, 13, 11, 8.6, 6.7, 5.1, 4.3, 3.7, 3.1, 2.5, 2.1, 1.7, 1.4, 1.1, 0.87, 0.68, 0.56, 0.45, 0.36, 0.28, 0.23, 0.19, 0.15, 0.13, 0.11, 0.09, 0.07, 0.054, 0.037, 0.024, 0.015, 0.0079, 0.0036, 0.0012
star_lmax = 20, 16, 13, 10, 8.2, 6.5, 5.7, 5.1, 4.5, 3.9, 3.5, 3.0, 2.6, 2.2, 1.9, 1.6, 1.3, 1.0, 0.84, 0.65, 0.48, 0.35, 0.25, 0.20, 0.15, 0.11, 0.08, 0, 0, 0, 0, 0, 0, 0
star_mspan = 1.3, 1.5, 1.8, 2.1, 2.5, 3.0, 3.3, 3.7, 4.1, 4.6, 5.2, 5.9, 6.7, 7.7, 8.8, 10, 12, 14, 17, 20, 24, 30, 37, 42, 50, 59, 70, 0, 0, 0, 0, 0, 0, 0
star_sspan = 0.2, 0.2, 0.3, 0.3, 0.4, 0.5, 0.5, 0.6, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.4, 1.6, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
star_gspan = 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.4, 0.5, 0.6, 0.6, 0.7, 0.8, 1.0, 1.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

if primary_star_roll_1 == 3 and primary_star_roll_2 <= 10 :
	primary_number = 0
elif primary_star_roll_1 == 3 and primary_star_roll_2 > 10 :
	primary_number = 1
elif primary_star_roll_1 == 4 and primary_star_roll_2 <= 8 :
	primary_number = 2
elif primary_star_roll_1 == 4 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 3
elif primary_star_roll_1 == 4 and primary_star_roll_2 > 11 :
	primary_number = 4
elif primary_star_roll_1 == 5 and primary_star_roll_2 <= 7 :
	primary_number = 5
elif primary_star_roll_1 == 5 and 7 < primary_star_roll_2 <= 10 :
	primary_number = 6
elif primary_star_roll_1 == 5 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 7
elif primary_star_roll_1 == 5 and primary_star_roll_2 > 12 :
	primary_number = 8
elif primary_star_roll_1 == 6 and primary_star_roll_2 <= 7 :
	primary_number = 9
elif primary_star_roll_1 == 6 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 10
elif primary_star_roll_1 == 6 and primary_star_roll_2 == 10 :
	primary_number = 11
elif primary_star_roll_1 == 6 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 12
elif primary_star_roll_1 == 6 and primary_star_roll_2 > 12 :
	primary_number = 13
elif primary_star_roll_1 == 7 and primary_star_roll_2 <= 7 :
	primary_number = 14
elif primary_star_roll_1 == 7 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 15
elif primary_star_roll_1 == 7 and primary_star_roll_2 == 10 :
	primary_number = 16
elif primary_star_roll_1 == 7 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 17
elif primary_star_roll_1 == 7 and primary_star_roll_2 > 12 :
	primary_number = 18
elif primary_star_roll_1 == 8 and primary_star_roll_2 <= 7 :
	primary_number = 19
elif primary_star_roll_1 == 8 and 7 < primary_star_roll_2 <= 9 :
	primary_number = 20
elif primary_star_roll_1 == 8 and primary_star_roll_2 == 10 :
	primary_number = 21
elif primary_star_roll_1 == 8 and 10 < primary_star_roll_2 <= 12 :
	primary_number = 22
elif primary_star_roll_1 == 8 and primary_star_roll_2 > 12 :
	primary_number = 23
elif primary_star_roll_1 == 9 and primary_star_roll_2 <= 8 :
	primary_number = 24
elif primary_star_roll_1 == 9 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 25
elif primary_star_roll_1 == 9 and primary_star_roll_2 > 11 :
	primary_number = 26
elif primary_star_roll_1 == 10 and primary_star_roll_2 <= 8 :
	primary_number = 27
elif primary_star_roll_1 == 10 and 8 < primary_star_roll_2 <= 11 :
	primary_number = 28
elif primary_star_roll_1 == 10 and primary_star_roll_2 > 11 :
	primary_number = 29
elif primary_star_roll_1 == 11 :
	primary_number = 30
elif primary_star_roll_1 == 12 :
	primary_number = 31
elif primary_star_roll_1 == 13 :
	primary_number = 32
else :
	primary_number = 33

primary_mass = star_mass[primary_number]
primary_type = star_type[primary_number]
primary_temp = star_temp[primary_number]
primary_lmin = star_lmin[primary_number]
primary_lmax = star_lmax[primary_number]
primary_mspan = star_mspan[primary_number]
primary_sspan = star_sspan[primary_number]
primary_gspan = star_gspan[primary_number]

if primary_number <= 4 :
	primary_mass_variance = random.randint(-5, 4) * 0.01
elif primary_number == 5 :
	primary_mass_variance = random.randint(-2, 4) * 0.01
else :
	primary_mass_variance = random.randint(-2, 2) * 0.01

primary_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if primary_mspan + primary_sspan + primary_gspan < population_age_final and 0.40 < primary_mass :
	primary_mass_final = 0.9 + (primary_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
else :
	primary_mass_final = primary_mass + primary_mass_variance

if population_age_final < primary_mspan :
	primary_lum = (primary_lmin + ((population_age_final / primary_mspan) * (primary_lmax - primary_lmin)))
elif (primary_mspan) <= population_age_final <= (primary_mspan + primary_sspan) :
	primary_lum = primary_lmax
elif (primary_mspan + primary_sspan) < population_age_final <= (primary_mspan + primary_sspan + primary_gspan) :
	primary_lum = primary_lmax * 25
elif primary_mspan + primary_sspan + primary_gspan < population_age_final and primary_mass <= 0.40 :
	primary_lum = primary_lmin
else :
	primary_lum = 0.001

primary_lum_variance = random.randint(90, 110) * 0.01

primary_lum_final = primary_lum * primary_lum_variance

primary_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if population_age_final <= primary_mspan :
	primary_temp_base = primary_temp
elif primary_mspan < population_age_final <= primary_mspan + primary_sspan :
	primary_temp_base = primary_temp - (((population_age_final - primary_mspan) / primary_sspan) * (primary_temp - 4800))
elif primary_mspan + primary_sspan < population_age_final <= primary_mspan + primary_sspan + primary_sspan :
	primary_temp_base = 3000 + (200 * primary_giant_temp_roll)
else :
	primary_temp_base = primary_temp

primary_temp_variance = random.randint(-100, 100)

if (primary_mspan + primary_sspan + primary_gspan) < population_age_final and 0.40 < primary_mass :
	primary_temp_final = "N/A"
else :
	primary_temp_final = primary_temp_base + primary_temp_variance

if primary_temp_final == "N/A" :
	primary_radius = "N/A"
else :
	primary_radius = (155000 * primary_lum_final**0.5) / primary_temp_final**2

secondary_star_roll = random.randint(1, 6) - 1

if secondary_star_roll == 0 :
	secondary_number_semi = primary_number
elif secondary_star_roll == 1 :
	secondary_number_semi = primary_number + random.randint(1, 6)
elif secondary_star_roll == 2 :
	secondary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6)
elif secondary_star_roll == 3 :
	secondary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
elif secondary_star_roll == 4 :
	secondary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
else :
	secondary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

if secondary_number_semi > 33 :
	secondary_number = 33
else :
	secondary_number = secondary_number_semi

secondary_mass = star_mass[secondary_number]
secondary_type = star_type[secondary_number]
secondary_temp = star_temp[secondary_number]
secondary_lmin = star_lmin[secondary_number]
secondary_lmax = star_lmax[secondary_number]
secondary_mspan = star_mspan[secondary_number]
secondary_sspan = star_sspan[secondary_number]
secondary_gspan = star_gspan[secondary_number]

if secondary_number <= 4 :
	secondary_mass_variance = random.randint(-5, 4) * 0.01
elif secondary_number == 5 :
	secondary_mass_variance = random.randint(-2, 4) * 0.01
else :
	secondary_mass_variance = random.randint(-2, 2) * 0.01

secondary_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if secondary_mspan + secondary_sspan + secondary_gspan < population_age_final and 0.40 < secondary_mass :
	secondary_mass_final = 0.9 + (secondary_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
else :
	secondary_mass_final = secondary_mass + secondary_mass_variance

if population_age_final < secondary_mspan :
	secondary_lum = (secondary_lmin + ((population_age_final / secondary_mspan) * (secondary_lmax - secondary_lmin)))
elif (secondary_mspan) <= population_age_final <= (secondary_mspan + secondary_sspan) :
	secondary_lum = secondary_lmax
elif (secondary_mspan + secondary_sspan) < population_age_final <= (secondary_mspan + secondary_sspan + secondary_gspan) :
	secondary_lum = secondary_lmax * 25
elif secondary_mspan + secondary_sspan + secondary_gspan < population_age_final and secondary_mass <= 0.40 :
	secondary_lum = secondary_lmin
else :
	secondary_lum = 0.001

secondary_lum_variance = random.randint(90, 110) * 0.01

secondary_lum_final = secondary_lum * secondary_lum_variance

secondary_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if population_age_final <= secondary_mspan :
	secondary_temp_base = secondary_temp
elif secondary_mspan < population_age_final <= secondary_mspan + secondary_sspan :
	secondary_temp_base = secondary_temp - (((population_age_final - secondary_mspan) / secondary_sspan) * (secondary_temp - 4800))
elif secondary_mspan + secondary_sspan < population_age_final <= secondary_mspan + secondary_sspan + secondary_sspan :
	secondary_temp_base = 3000 + (200 * secondary_giant_temp_roll)
else :
	secondary_temp_base = secondary_temp

secondary_temp_variance = random.randint(-100, 100)

if (secondary_mspan + secondary_sspan + secondary_gspan) < population_age_final and 0.40 < secondary_mass :
	secondary_temp_final = "N/A"
else :
	secondary_temp_final = secondary_temp_base + secondary_temp_variance

if secondary_temp_final == "N/A" :
	secondary_radius = "N/A"
else :
	secondary_radius = (155000 * secondary_lum_final**0.5) / secondary_temp_final**2

secondary_orbit_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
secondary_orbit_roll_2 = random.randint(1, 6) + random.randint(1, 6)

if secondary_orbit_roll_1 <= 6 :
	secondary_orbit_separation = "Very Close"
	secondary_separation = 0.05 * secondary_orbit_roll_2
	secondary_separation_variance = random.randint(-25, 25) * 0.001
	secondary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
elif 6 < secondary_orbit_roll_1 <= 9 :
	secondary_orbit_separation = "Close"
	secondary_separation = 0.5 * secondary_orbit_roll_2
	secondary_separation_variance = random.randint(-25, 25) * 0.01
	secondary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 4
elif 9 < secondary_orbit_roll_1 <= 11 :
	secondary_orbit_separation = "Moderate"
	secondary_separation = 2 * secondary_orbit_roll_2
	secondary_separation_variance = random.randint(-10, 10) * 0.1
	secondary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 2
elif 11 < secondary_orbit_roll_1 <= 14 :
	secondary_orbit_separation = "Wide"
	secondary_separation = 10 * secondary_orbit_roll_2
	secondary_separation_variance = random.randint(-50, 50) * 0.1
	secondary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
else :
	secondary_orbit_separation = "Distant"
	secondary_separation = 50 * secondary_orbit_roll_2
	secondary_separation_variance = random.randint(-25, 25)
	secondary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

secondary_separation_final = secondary_separation + secondary_separation_variance

if secondary_eccentricity_roll <= 3 :
	secondary_eccentricity = 0
elif secondary_eccentricity_roll == 4 :
	secondary_eccentricity = 0.1
elif secondary_eccentricity_roll == 5 :
	secondary_eccentricity = 0.2
elif secondary_eccentricity_roll == 6 :
	secondary_eccentricity = 0.3
elif 6 < secondary_eccentricity_roll <= 8 :
	secondary_eccentricity = 0.4
elif 8 < secondary_eccentricity_roll <= 11 :
	secondary_eccentricity = 0.5
elif 11 < secondary_eccentricity_roll <= 13 :
	secondary_eccentricity = 0.6
elif 13 < secondary_eccentricity_roll <= 15 :
	secondary_eccentricity = 0.7
elif secondary_eccentricity_roll == 16 :
	secondary_eccentricity = 0.8
elif secondary_eccentricity_roll == 17 :
	secondary_eccentricity = 0.9
else :
	secondary_eccentricity = 0.95

if secondary_eccentricity == 0 :
	secondary_eccentricity_variance = random.randint(0, 4) * 0.01
elif 0 < secondary_eccentricity <= 0.8 :
	secondary_eccentricity_variance = random.randint(-5, 4) * 0.01
elif secondary_eccentricity == 0.9 :
	secondary_eccentricity_variance = random.randint(-5, 2) * 0.01
else :
	secondary_eccentricity_variance = random.randint(-2, 4) * 0.01

secondary_eccentricity_final = secondary_eccentricity + secondary_eccentricity_variance
secondary_separation_min = (1 - secondary_eccentricity_final) * secondary_separation_final
secondary_separation_max = (1 + secondary_eccentricity_final) * secondary_separation_final

secondary_companion = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
secondary_companion_number = 0

if 10 < secondary_companion and secondary_orbit_separation == "Distant" :
	secondary_companion_roll = random.randint(1, 6) - 1
	if secondary_companion_roll == 0 :
		secondary_companion_number_semi = secondary_number
	elif secondary_companion_roll == 1 :
		secondary_companion_number_semi = secondary_number + random.randint(1, 6)
	elif secondary_companion_roll == 2 :
		secondary_companion_number_semi = secondary_number + random.randint(1, 6) + random.randint(1, 6)
	elif secondary_companion_roll == 3 :
		secondary_companion_number_semi = secondary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	elif secondary_companion_roll == 4 :
		secondary_companion_number_semi = secondary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	else :
		secondary_companion_number_semi = secondary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	if secondary_companion_number_semi > 33 :
		secondary_companion_number = 33
	else :
		secondary_campanion_number = secondary_companion_number_semi
	secondary_companion_mass = star_mass[secondary_companion_number]
	secondary_companion_type = star_type[secondary_companion_number]
	secondary_companion_temp = star_temp[secondary_companion_number]
	secondary_companion_lmin = star_lmin[secondary_companion_number]
	secondary_companion_lmax = star_lmax[secondary_companion_number]
	secondary_companion_mspan = star_mspan[secondary_companion_number]
	secondary_companion_sspan = star_sspan[secondary_companion_number]
	secondary_companion_gspan = star_gspan[secondary_companion_number]
	if secondary_companion_number <= 4 :
		secondary_companion_mass_variance = random.randint(-5, 4) * 0.01
	elif secondary_companion_number == 5 :
		secondary_companion_mass_variance = random.randint(-2, 4) * 0.01
	else :
		secondary_companion_mass_variance = random.randint(-2, 2) * 0.01
	secondary_companion_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2
	if secondary_companion_mspan + secondary_companion_sspan + secondary_companion_gspan < population_age_final and 0.40 < secondary_companion_mass :
		secondary_companion_mass_final = 0.9 + (secondary_companion_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
	else :
		secondary_companion_mass_final = secondary_companion_mass + secondary_companion_mass_variance
	if population_age_final < secondary_companion_mspan :
		secondary_companion_lum = (secondary_companion_lmin + ((population_age_final / secondary_companion_mspan) * (secondary_companion_lmax - secondary_companion_lmin)))
	elif (secondary_companion_mspan) <= population_age_final <= (secondary_companion_mspan + secondary_companion_sspan) :
		secondary_companion_lum = secondary_companion_lmax
	elif (secondary_companion_mspan + secondary_companion_sspan) < population_age_final <= (secondary_companion_mspan + secondary_companion_sspan + secondary_companion_gspan) :
		secondary_companion_lum = secondary_companion_lmax * 25
	elif secondary_companion_mspan + secondary_companion_sspan + secondary_companion_gspan < population_age_final and secondary_companion_mass <= 0.40 :
		secondary_companion_lum = secondary_companion_lmin
	else :
		secondary_companion_lum = 0.001
	secondary_companion_lum_variance = random.randint(90, 110) * 0.01
	secondary_companion_lum_final = secondary_companion_lum * secondary_companion_lum_variance
	secondary_companion_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2
	if population_age_final <= secondary_companion_mspan :
		secondary_companion_temp_base = secondary_companion_temp
	elif secondary_companion_mspan < population_age_final <= secondary_companion_mspan + secondary_companion_sspan :
		secondary_companion_temp_base = secondary_companion_temp - (((population_age_final - secondary_companion_mspan) / secondary_companion_sspan) * (secondary_companion_temp - 4800))
	elif secondary_companion_mspan + secondary_companion_sspan < population_age_final <= secondary_companion_mspan + secondary_companion_sspan + secondary_companion_sspan :
		secondary_companion_temp_base = 3000 + (200 * secondary_companion_giant_temp_roll)
	else :
		secondary_companion_temp_base = secondary_companion_temp
	secondary_companion_temp_variance = random.randint(-100, 100)
	if (secondary_companion_mspan + secondary_companion_sspan + secondary_companion_gspan) < population_age_final and 0.40 < secondary_companion_mass :
		secondary_companion_temp_final = "N/A"
	else :
		secondary_companion_temp_final = secondary_companion_temp_base + secondary_companion_temp_variance
	if secondary_companion_temp_final == "N/A" :
		secondary_companion_radius = "N/A"
	else :
		secondary_companion_radius = (155000 * secondary_companion_lum_final**0.5) / secondary_companion_temp_final**2
	secondary_companion_orbit_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
	secondary_companion_orbit_roll_2 = random.randint(1, 6) + random.randint(1, 6)
	if secondary_companion_orbit_roll_1 <= 6 :
		secondary_companion_orbit_separation = "Very Close"
		secondary_companion_separation = 0.05 * secondary_companion_orbit_roll_2
		secondary_companion_separation_variance = random.randint(-25, 25) * 0.001
		secondary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
	elif 6 < secondary_companion_orbit_roll_1 <= 9 :
		secondary_companion_orbit_separation = "Close"
		secondary_companion_separation = 0.5 * secondary_companion_orbit_roll_2
		secondary_companion_separation_variance = random.randint(-25, 25) * 0.01
		secondary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 4
	elif 9 < secondary_companion_orbit_roll_1 <= 11 :
		secondary_companion_orbit_separation = "Moderate"
		secondary_companion_separation = 2 * secondary_companion_orbit_roll_2
		secondary_companion_separation_variance = random.randint(-10, 10) * 0.1
		secondary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 2
	elif 11 < secondary_companion_orbit_roll_1 <= 14 :
		secondary_companion_orbit_separation = "Wide"
		secondary_companion_separation = 10 * secondary_companion_orbit_roll_2
		secondary_companion_separation_variance = random.randint(-50, 50) * 0.1
		secondary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	else :
		secondary_companion_orbit_separation = "Distant"
		secondary_companion_separation = 50 * secondary_companion_orbit_roll_2
		secondary_companion_separation_variance = random.randint(-25, 25)
		secondary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	secondary_companion_separation_final = secondary_companion_separation + secondary_companion_separation_variance
	if secondary_companion_eccentricity_roll <= 3 :
		secondary_companion_eccentricity = 0
	elif secondary_companion_eccentricity_roll == 4 :
		secondary_companion_eccentricity = 0.1
	elif secondary_companion_eccentricity_roll == 5 :
		secondary_companion_eccentricity = 0.2
	elif secondary_companion_eccentricity_roll == 6 :
		secondary_companion_eccentricity = 0.3
	elif 6 < secondary_companion_eccentricity_roll <= 8 :
		secondary_companion_eccentricity = 0.4
	elif 8 < secondary_companion_eccentricity_roll <= 11 :
		secondary_companion_eccentricity = 0.5
	elif 11 < secondary_companion_eccentricity_roll <= 13 :
		secondary_companion_eccentricity = 0.6
	elif 13 < secondary_companion_eccentricity_roll <= 15 :
		secondary_companion_eccentricity = 0.7
	elif secondary_companion_eccentricity_roll == 16 :
		secondary_companion_eccentricity = 0.8
	elif secondary_companion_eccentricity_roll == 17 :
		secondary_companion_eccentricity = 0.9
	else :
		secondary_companion_eccentricity = 0.95
	if secondary_companion_eccentricity == 0 :
		secondary_companion_eccentricity_variance = random.randint(0, 4) * 0.01
	elif 0 < secondary_companion_eccentricity <= 0.8 :
		secondary_companion_eccentricity_variance = random.randint(-5, 4) * 0.01
	elif secondary_companion_eccentricity == 0.9 :
		secondary_companion_eccentricity_variance = random.randint(-5, 2) * 0.01
	else :
		secondary_companion_eccentricity_variance = random.randint(-2, 4) * 0.01
	secondary_companion_eccentricity_final = secondary_companion_eccentricity + secondary_companion_eccentricity_variance
	secondary_companion_separation_min = (1 - secondary_companion_eccentricity_final) * secondary_companion_separation_final
	secondary_companion_separation_max = (1 + secondary_companion_eccentricity_final) * secondary_companion_separation_final
else :
	None

tertiary_star_roll = random.randint(1, 6) - 1

if tertiary_star_roll == 0 :
	tertiary_number_semi = primary_number
elif tertiary_star_roll == 1 :
	tertiary_number_semi = primary_number + random.randint(1, 6)
elif tertiary_star_roll == 2 :
	tertiary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6)
elif tertiary_star_roll == 3 :
	tertiary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
elif tertiary_star_roll == 4 :
	tertiary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
else :
	tertiary_number_semi = primary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

if tertiary_number_semi > 33 :
	tertiary_number = 33
else :
	tertiary_number = tertiary_number_semi

tertiary_mass = star_mass[tertiary_number]
tertiary_type = star_type[tertiary_number]
tertiary_temp = star_temp[tertiary_number]
tertiary_lmin = star_lmin[tertiary_number]
tertiary_lmax = star_lmax[tertiary_number]
tertiary_mspan = star_mspan[tertiary_number]
tertiary_sspan = star_sspan[tertiary_number]
tertiary_gspan = star_gspan[tertiary_number]

if tertiary_number <= 4 :
	tertiary_mass_variance = random.randint(-5, 4) * 0.01
elif tertiary_number == 5 :
	tertiary_mass_variance = random.randint(-2, 4) * 0.01
else :
	tertiary_mass_variance = random.randint(-2, 2) * 0.01

tertiary_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if tertiary_mspan + tertiary_sspan + tertiary_gspan < population_age_final and 0.40 < tertiary_mass :
	tertiary_mass_final = 0.9 + (tertiary_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
else :
	tertiary_mass_final = tertiary_mass + tertiary_mass_variance

if population_age_final < tertiary_mspan :
	tertiary_lum = (tertiary_lmin + ((population_age_final / tertiary_mspan) * (tertiary_lmax - tertiary_lmin)))
elif (tertiary_mspan) <= population_age_final <= (tertiary_mspan + tertiary_sspan) :
	tertiary_lum = tertiary_lmax
elif (tertiary_mspan + tertiary_sspan) < population_age_final <= (tertiary_mspan + tertiary_sspan + tertiary_gspan) :
	tertiary_lum = tertiary_lmax * 25
elif tertiary_mspan + tertiary_sspan + tertiary_gspan < population_age_final and tertiary_mass <= 0.40 :
	tertiary_lum = tertiary_lmin
else :
	tertiary_lum = 0.001

tertiary_lum_variance = random.randint(90, 110) * 0.01

tertiary_lum_final = tertiary_lum * tertiary_lum_variance

tertiary_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2

if population_age_final <= tertiary_mspan :
	tertiary_temp_base = tertiary_temp
elif tertiary_mspan < population_age_final <= tertiary_mspan + tertiary_sspan :
	tertiary_temp_base = tertiary_temp - (((population_age_final - tertiary_mspan) / tertiary_sspan) * (tertiary_temp - 4800))
elif tertiary_mspan + tertiary_sspan < population_age_final <= tertiary_mspan + tertiary_sspan + tertiary_sspan :
	tertiary_temp_base = 3000 + (200 * tertiary_giant_temp_roll)
else :
	tertiary_temp_base = tertiary_temp

tertiary_temp_variance = random.randint(-100, 100)

if (tertiary_mspan + tertiary_sspan + tertiary_gspan) < population_age_final and 0.40 < tertiary_mass :
	tertiary_temp_final = "N/A"
else :
	tertiary_temp_final = tertiary_temp_base + tertiary_temp_variance

if tertiary_temp_final == "N/A" :
	tertiary_radius = "N/A"
else :
	tertiary_radius = (155000 * tertiary_lum_final**0.5) / tertiary_temp_final**2

tertiary_orbit_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + 6
tertiary_orbit_roll_2 = random.randint(1, 6) + random.randint(1, 6)

if tertiary_orbit_roll_1 <= 6 :
	tertiary_orbit_separation = "Very Close"
	tertiary_separation = 0.05 * tertiary_orbit_roll_2
	tertiary_separation_variance = random.randint(-25, 25) * 0.001
	tertiary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
elif 6 < tertiary_orbit_roll_1 <= 9 :
	tertiary_orbit_separation = "Close"
	tertiary_separation = 0.5 * tertiary_orbit_roll_2
	tertiary_separation_variance = random.randint(-25, 25) * 0.01
	tertiary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 4
elif 9 < tertiary_orbit_roll_1 <= 11 :
	tertiary_orbit_separation = "Moderate"
	tertiary_separation = 2 * tertiary_orbit_roll_2
	tertiary_separation_variance = random.randint(-10, 10) * 0.1
	tertiary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 2
elif 11 < tertiary_orbit_roll_1 <= 14 :
	tertiary_orbit_separation = "Wide"
	tertiary_separation = 10 * tertiary_orbit_roll_2
	tertiary_separation_variance = random.randint(-50, 50) * 0.1
	tertiary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
else :
	tertiary_orbit_separation = "Distant"
	tertiary_separation = 50 * tertiary_orbit_roll_2
	tertiary_separation_variance = random.randint(-25, 25)
	tertiary_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)

tertiary_separation_final = tertiary_separation + tertiary_separation_variance

if tertiary_eccentricity_roll <= 3 :
	tertiary_eccentricity = 0
elif tertiary_eccentricity_roll == 4 :
	tertiary_eccentricity = 0.1
elif tertiary_eccentricity_roll == 5 :
	tertiary_eccentricity = 0.2
elif tertiary_eccentricity_roll == 6 :
	tertiary_eccentricity = 0.3
elif 6 < tertiary_eccentricity_roll <= 8 :
	tertiary_eccentricity = 0.4
elif 8 < tertiary_eccentricity_roll <= 11 :
	tertiary_eccentricity = 0.5
elif 11 < tertiary_eccentricity_roll <= 13 :
	tertiary_eccentricity = 0.6
elif 13 < tertiary_eccentricity_roll <= 15 :
	tertiary_eccentricity = 0.7
elif tertiary_eccentricity_roll == 16 :
	tertiary_eccentricity = 0.8
elif tertiary_eccentricity_roll == 17 :
	tertiary_eccentricity = 0.9
else :
	tertiary_eccentricity = 0.95

if tertiary_eccentricity == 0 :
	tertiary_eccentricity_variance = random.randint(0, 4) * 0.01
elif 0 < tertiary_eccentricity <= 0.8 :
	tertiary_eccentricity_variance = random.randint(-5, 4) * 0.01
elif tertiary_eccentricity == 0.9 :
	tertiary_eccentricity_variance = random.randint(-5, 2) * 0.01
else :
	tertiary_eccentricity_variance = random.randint(-2, 4) * 0.01

tertiary_eccentricity_final = tertiary_eccentricity + tertiary_eccentricity_variance
tertiary_separation_min = (1 - tertiary_eccentricity_final) * tertiary_separation_final
tertiary_separation_max = (1 + tertiary_eccentricity_final) * tertiary_separation_final

tertiary_companion = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
tertiary_companion_number = 0

if 10 < tertiary_companion and tertiary_orbit_separation == "Distant" :
	tertiary_companion_roll = random.randint(1, 6) - 1
	if tertiary_companion_roll == 0 :
		tertiary_companion_number_semi = tertiary_number
	elif tertiary_companion_roll == 1 :
		tertiary_companion_number_semi = tertiary_number + random.randint(1, 6)
	elif tertiary_companion_roll == 2 :
		tertiary_companion_number_semi = tertiary_number + random.randint(1, 6) + random.randint(1, 6)
	elif tertiary_companion_roll == 3 :
		tertiary_companion_number_semi = tertiary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	elif tertiary_companion_roll == 4 :
		tertiary_companion_number_semi = tertiary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	else :
		tertiary_companion_number_semi = tertiary_number + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	if tertiary_companion_number_semi > 33 :
		tertiary_companion_number = 33
	else :
		tertiary_campanion_number = tertiary_companion_number_semi
	tertiary_companion_mass = star_mass[tertiary_companion_number]
	tertiary_companion_type = star_type[tertiary_companion_number]
	tertiary_companion_temp = star_temp[tertiary_companion_number]
	tertiary_companion_lmin = star_lmin[tertiary_companion_number]
	tertiary_companion_lmax = star_lmax[tertiary_companion_number]
	tertiary_companion_mspan = star_mspan[tertiary_companion_number]
	tertiary_companion_sspan = star_sspan[tertiary_companion_number]
	tertiary_companion_gspan = star_gspan[tertiary_companion_number]
	if tertiary_companion_number <= 4 :
		tertiary_companion_mass_variance = random.randint(-5, 4) * 0.01
	elif tertiary_companion_number == 5 :
		tertiary_companion_mass_variance = random.randint(-2, 4) * 0.01
	else :
		tertiary_companion_mass_variance = random.randint(-2, 2) * 0.01
	tertiary_companion_dwarf_mass_roll = random.randint(1, 6) + random.randint(1, 6) - 2
	if tertiary_companion_mspan + tertiary_companion_sspan + tertiary_companion_gspan < population_age_final and 0.40 < tertiary_companion_mass :
		tertiary_companion_mass_final = 0.9 + (tertiary_companion_dwarf_mass_roll * 0.05) + (random.randint(-5, 4) * 0.01)
	else :
		tertiary_companion_mass_final = tertiary_companion_mass + tertiary_companion_mass_variance
	if population_age_final < tertiary_companion_mspan :
		tertiary_companion_lum = (tertiary_companion_lmin + ((population_age_final / tertiary_companion_mspan) * (tertiary_companion_lmax - tertiary_companion_lmin)))
	elif (tertiary_companion_mspan) <= population_age_final <= (tertiary_companion_mspan + tertiary_companion_sspan) :
		tertiary_companion_lum = tertiary_companion_lmax
	elif (tertiary_companion_mspan + tertiary_companion_sspan) < population_age_final <= (tertiary_companion_mspan + tertiary_companion_sspan + tertiary_companion_gspan) :
		tertiary_companion_lum = tertiary_companion_lmax * 25
	elif tertiary_companion_mspan + tertiary_companion_sspan + tertiary_companion_gspan < population_age_final and tertiary_companion_mass <= 0.40 :
		tertiary_companion_lum = tertiary_companion_lmin
	else :
		tertiary_companion_lum = 0.001
	tertiary_companion_lum_variance = random.randint(90, 110) * 0.01
	tertiary_companion_lum_final = tertiary_companion_lum * tertiary_companion_lum_variance
	tertiary_companion_giant_temp_roll = random.randint(1, 6) + random.randint(1, 6) - 2
	if population_age_final <= tertiary_companion_mspan :
		tertiary_companion_temp_base = tertiary_companion_temp
	elif tertiary_companion_mspan < population_age_final <= tertiary_companion_mspan + tertiary_companion_sspan :
		tertiary_companion_temp_base = tertiary_companion_temp - (((population_age_final - tertiary_companion_mspan) / tertiary_companion_sspan) * (tertiary_companion_temp - 4800))
	elif tertiary_companion_mspan + tertiary_companion_sspan < population_age_final <= tertiary_companion_mspan + tertiary_companion_sspan + tertiary_companion_sspan :
		tertiary_companion_temp_base = 3000 + (200 * tertiary_companion_giant_temp_roll)
	else :
		tertiary_companion_temp_base = tertiary_companion_temp
	tertiary_companion_temp_variance = random.randint(-100, 100)
	if (tertiary_companion_mspan + tertiary_companion_sspan + tertiary_companion_gspan) < population_age_final and 0.40 < tertiary_companion_mass :
		tertiary_companion_temp_final = "N/A"
	else :
		tertiary_companion_temp_final = tertiary_companion_temp_base + tertiary_companion_temp_variance
	if tertiary_companion_temp_final == "N/A" :
		tertiary_companion_radius = "N/A"
	else :
		tertiary_companion_radius = (155000 * tertiary_companion_lum_final**0.5) / tertiary_companion_temp_final**2
	tertiary_companion_orbit_roll_1 = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
	tertiary_companion_orbit_roll_2 = random.randint(1, 6) + random.randint(1, 6)
	if tertiary_companion_orbit_roll_1 <= 6 :
		tertiary_companion_orbit_separation = "Very Close"
		tertiary_companion_separation = 0.05 * tertiary_companion_orbit_roll_2
		tertiary_companion_separation_variance = random.randint(-25, 25) * 0.001
		tertiary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 6
	elif 6 < tertiary_companion_orbit_roll_1 <= 9 :
		tertiary_companion_orbit_separation = "Close"
		tertiary_companion_separation = 0.5 * tertiary_companion_orbit_roll_2
		tertiary_companion_separation_variance = random.randint(-25, 25) * 0.01
		tertiary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 4
	elif 9 < tertiary_companion_orbit_roll_1 <= 11 :
		tertiary_companion_orbit_separation = "Moderate"
		tertiary_companion_separation = 2 * tertiary_companion_orbit_roll_2
		tertiary_companion_separation_variance = random.randint(-10, 10) * 0.1
		tertiary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6) - 2
	elif 11 < tertiary_companion_orbit_roll_1 <= 14 :
		tertiary_companion_orbit_separation = "Wide"
		tertiary_companion_separation = 10 * tertiary_companion_orbit_roll_2
		tertiary_companion_separation_variance = random.randint(-50, 50) * 0.1
		tertiary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	else :
		tertiary_companion_orbit_separation = "Distant"
		tertiary_companion_separation = 50 * tertiary_companion_orbit_roll_2
		tertiary_companion_separation_variance = random.randint(-25, 25)
		tertiary_companion_eccentricity_roll = random.randint(1, 6) + random.randint(1, 6) + random.randint(1, 6)
	tertiary_companion_separation_final = tertiary_companion_separation + tertiary_companion_separation_variance
	if tertiary_companion_eccentricity_roll <= 3 :
		tertiary_companion_eccentricity = 0
	elif tertiary_companion_eccentricity_roll == 4 :
		tertiary_companion_eccentricity = 0.1
	elif tertiary_companion_eccentricity_roll == 5 :
		tertiary_companion_eccentricity = 0.2
	elif tertiary_companion_eccentricity_roll == 6 :
		tertiary_companion_eccentricity = 0.3
	elif 6 < tertiary_companion_eccentricity_roll <= 8 :
		tertiary_companion_eccentricity = 0.4
	elif 8 < tertiary_companion_eccentricity_roll <= 11 :
		tertiary_companion_eccentricity = 0.5
	elif 11 < tertiary_companion_eccentricity_roll <= 13 :
		tertiary_companion_eccentricity = 0.6
	elif 13 < tertiary_companion_eccentricity_roll <= 15 :
		tertiary_companion_eccentricity = 0.7
	elif tertiary_companion_eccentricity_roll == 16 :
		tertiary_companion_eccentricity = 0.8
	elif tertiary_companion_eccentricity_roll == 17 :
		tertiary_companion_eccentricity = 0.9
	else :
		tertiary_companion_eccentricity = 0.95
	if tertiary_companion_eccentricity == 0 :
		tertiary_companion_eccentricity_variance = random.randint(0, 4) * 0.01
	elif 0 < tertiary_companion_eccentricity <= 0.8 :
		tertiary_companion_eccentricity_variance = random.randint(-5, 4) * 0.01
	elif tertiary_companion_eccentricity == 0.9 :
		tertiary_companion_eccentricity_variance = random.randint(-5, 2) * 0.01
	else :
		tertiary_companion_eccentricity_variance = random.randint(-2, 4) * 0.01
	tertiary_companion_eccentricity_final = tertiary_companion_eccentricity + tertiary_companion_eccentricity_variance
	tertiary_companion_separation_min = (1 - tertiary_companion_eccentricity_final) * tertiary_companion_separation_final
	tertiary_companion_separation_max = (1 + tertiary_companion_eccentricity_final) * tertiary_companion_separation_final
else :
	None

print "System Type: " + str(stars_final) + " (3d+3: " + str(stars_roll) + ")"
print "System Age: " + str(population_age_final) + " Billion Years, " + str(population_type_final) + " (3d: " + str(population_roll_1) + ", 1d-1: " + str(population_roll_2) + ", 1d-1: " + str(population_roll_3) + ")"
if primary_temp_final == "N/A" :
	print "Primary Star: " + str(primary_mass_final) + " solar masses (White Dwarf)"
else :
	print "Primary Star: " + str(primary_mass_final) + " (" + str(primary_mass) + ") solar masses (3d: " + str(primary_star_roll_1) + ", 3d: " + str(primary_star_roll_2) + ")"
if primary_temp_final == "N/A" :
	print "	Type: " + str(primary_type) + "; Temp: " + str(primary_temp_final) + "; Luminosity: " + str(primary_lum_final) + "L; Radius: " + str(primary_radius)
else :
	print "	Type: " + str(primary_type) + "; Temp: " + str(primary_temp_final) + "K; Luminosity: " + str(primary_lum_final) + "L; Radius: " + str(primary_radius) + " AU"
if stars_final == "Binary" or stars_final == "Trinary" :
	if secondary_temp_final == "N/A" :
		print "Secondary Star: " + str(secondary_mass_final) + " solar masses (White Dwarf)"
	else :
		print "Secondary Star: " + str(secondary_mass_final) + " (" + str(secondary_mass) + ") solar masses (1d-1: " + str(secondary_star_roll) + ", " + str(secondary_star_roll) + "d: " + str(secondary_number_semi - primary_number) + ")"
	if secondary_temp_final == "N/A" :
		print "	Type: " + str(secondary_type) + "; Temp: " + str(secondary_temp_final) + "; Luminosity: " + str(secondary_lum_final) + "L; Radius: " + str(secondary_radius)
	else :
		print "	Type: " + str(secondary_type) + "; Temp: " + str(secondary_temp_final) + "K; Luminosity: " + str(secondary_lum_final) + "L; Radius: " + str(secondary_radius) + " AU"
	print "	Separation: " + str(secondary_orbit_separation) + "; Orbital Radius
else :
	None

if 10 < secondary_companion and secondary_orbit_separation == "Distant" and (stars_final == "Binary" or stars_final == "Trinary") :
	if secondary_companion_temp_final == "N/A" :
		print "--Companion Star: (3d: " + str(secondary_companion) + ") " + str(secondary_companion_mass_final) + " solar masses (White Dwarf)"
	else :
		print "--Companion Star: (3d: " + str(secondary_companion) + ") " + str(secondary_companion_mass_final) + " (" + str(secondary_companion_mass) + ") solar masses (1d-1: " + str(secondary_companion_roll) + ", " + str(secondary_companion_roll) + "d: " + str(secondary_companion_number_semi - secondary_number) + ")"
	if secondary_temp_final == "N/A" :
		print "	--Type: " + str(secondary_companion_type) + "; Temp: " + str(secondary_companion_temp_final) + "; Luminosity: " + str(secondary_companion_lum_final) + "L; Radius: " + str(secondary_companion_radius)
	else :
		print "	--Type: " + str(secondary_companion_type) + "; Temp: " + str(secondary_companion_temp_final) + "K; Luminosity: " + str(secondary_companion_lum_final) + "L; Radius: " + str(secondary_companion_radius) + " AU"

else :
	None

if stars_final == "Trinary" :
	if tertiary_temp_final == "N/A" :
		print "Tertiary Star: " + str(tertiary_mass_final) + " solar masses (White Dwarf)"
	else :
		print "Tertiary Star: " + str(tertiary_mass_final) + " (" + str(tertiary_mass) + ") solar masses (1d-1: " + str(tertiary_star_roll) + ", " + str(tertiary_star_roll) + "d: " + str(tertiary_number_semi - primary_number) + ")"
	if secondary_temp_final == "N/A" :
		print "	Type: " + str(tertiary_type) + "; Temp: " + str(tertiary_temp_final) + "; Luminosity: " + str(tertiary_lum_final) + "L; Radius: " + str(tertiary_radius)
	else :
		print "	Type: " + str(tertiary_type) + "; Temp: " + str(tertiary_temp_final) + "K; Luminosity: " + str(tertiary_lum_final) + "L; Radius: " + str(tertiary_radius) + " AU"
else :
	None

if 10 < tertiary_companion and tertiary_orbit_separation == "Distant" and stars_final == "Trinary" :
	if tertiary_companion_temp_final == "N/A" :
		print "--Companion Star: (3d: " + str(tertiary_companion) + ") " + str(tertiary_companion_mass_final) + " solar masses (White Dwarf)"
	else :
		print "--Companion Star: (3d: " + str(tertiary_companion) + ") " + str(tertiary_companion_mass_final) + " (" + str(tertiary_companion_mass) + ") solar masses (1d-1: " + str(tertiary_companion_roll) + ", " + str(tertiary_companion_roll) + "d: " + str(tertiary_companion_number_semi - tertiary_number) + ")"
	if tertiary_companion_temp_final == "N/A" :
		print "	--Type: " + str(tertiary_companion_type) + "; Temp: " + str(tertiary_companion_temp_final) + "; Luminosity: " + str(tertiary_companion_lum_final) + "L; Radius: " + str(tertiary_companion_radius)
	else :
		print "	--Type: " + str(tertiary_companion_type) + "; Temp: " + str(tertiary_companion_temp_final) + "K; Luminosity: " + str(tertiary_companion_lum_final) + "L; Radius: " + str(tertiary_companion_radius) + " AU"
else :
	None
